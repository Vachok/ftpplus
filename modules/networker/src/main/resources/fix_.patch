Index: modules/networker/src/main/java/ru/vachok/networker/data/synchronizer/SyncData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/networker/src/main/java/ru/vachok/networker/data/synchronizer/SyncData.java	(revision 8f689deb4f86d90c484923b6443575412e999be4)
+++ modules/networker/src/main/java/ru/vachok/networker/data/synchronizer/SyncData.java	(date 1568479511195)
@@ -83,7 +83,8 @@
             }
         }
         else {
-            String jsonFile = new DBRemoteDownloader(lastLocalID).writeJSON();
+            String id = ConstantsFor.DB_INETSTATS + inetStatsPath.toFile().getName().replace(".csv", "").replaceAll("\\Q.\\E", "_");
+            String jsonFile = new DBRemoteDownloader(lastLocalID).writeJSON(id);
             fromFileToJSON.addAll(FileSystemWorker.readFileToQueue(Paths.get(jsonFile).toAbsolutePath().normalize()));
         }
         setDbToSync(getDbToSync().replaceAll("\\Q.\\E", "_"));
@@ -94,10 +95,16 @@
     }
     
     int getLastLocalID(String syncDB) {
+        if (!syncDB.contains(".") || syncDB.matches(String.valueOf(ConstantsFor.PATTERN_IP))) {
+            throw new IllegalArgumentException(syncDB);
+        }
         return getDBID(CONNECT_TO_LOCAL, syncDB);
     }
     
     int getLastRemoteID(String syncDB) {
+        if (!syncDB.contains(".") || syncDB.matches(String.valueOf(ConstantsFor.PATTERN_IP))) {
+            throw new IllegalArgumentException(syncDB);
+        }
         return getDBID(CONNECT_TO_REGRU, syncDB);
     }
     
@@ -170,8 +177,8 @@
             }
         }
         catch (SQLException e) {
-            messageToUser.error(e.getMessage() + " see line: 80 ***");
-            return -80;
+            messageToUser.error(e.getMessage() + " see line: 174 ***");
+            return -174;
         }
     }
     
Index: modules/networker/src/main/java/ru/vachok/networker/data/synchronizer/DBStatsUploader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/networker/src/main/java/ru/vachok/networker/data/synchronizer/DBStatsUploader.java	(revision 8f689deb4f86d90c484923b6443575412e999be4)
+++ modules/networker/src/main/java/ru/vachok/networker/data/synchronizer/DBStatsUploader.java	(date 1568479511215)
@@ -6,14 +6,11 @@
 import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
-import ru.vachok.networker.componentsrepo.fileworks.FileSystemWorker;
 import ru.vachok.networker.data.enums.ConstantsFor;
 import ru.vachok.networker.data.enums.PropertiesNames;
 import ru.vachok.networker.restapi.message.MessageToUser;
 
 import java.io.File;
-import java.nio.file.Path;
-import java.nio.file.Paths;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
@@ -32,7 +29,7 @@
     
     private static final MessageToUser messageToUser = MessageToUser.getInstance(MessageToUser.LOCAL_CONSOLE, DBStatsUploader.class.getSimpleName());
     
-    private String syncTable;
+    private String syncTable = ConstantsFor.TABLE_VELKOMPC;
     
     private String[] classOpt;
     
@@ -52,9 +49,9 @@
             throw new IllegalArgumentException(MessageFormat.format("Table {0} is null or illegal ", syncTable));
         }
         if (fromFileToJSON.size() == 0) {
-            makeTable(syncTable);
+            makeTable(ConstantsFor.DBBASENAME_U0466446_VELKOM + "." + syncTable);
         }
-        return MessageFormat.format("Upload: {0} rows to {1}", uploadToTableIP(), syncTable);
+        return MessageFormat.format("Upload: {0} rows to {1}", uploadFromJSON(), syncTable);
     }
     
     @Override
@@ -86,7 +83,7 @@
                 fromFileToJSON.addFirst(convertToJSON(s));
             }
         }
-        return uploadToTableIP();
+        return uploadFromJSON();
     }
     
     private @NotNull String convertToJSON(@NotNull String stringFromUserIPInetStatisticsFile) {
@@ -97,22 +94,45 @@
             return jsonObject.toString();
         }
         long timeStamp = parseStamp(splittedString[0]);
-        jsonObject.add(ConstantsFor.DBCOL_STAMP, String.valueOf(timeStamp));
-        jsonObject.add(ConstantsFor.DBCOL_RESPONSE, splittedString[1]);
-        jsonObject.add(ConstantsFor.DBCOL_BYTES, splittedString[2]);
-        jsonObject.add("site", splittedString[3]);
+        try {
+            jsonObject.add(ConstantsFor.DBCOL_STAMP, String.valueOf(timeStamp));
+            jsonObject.add(ConstantsFor.DBCOL_SQUIDANS, splittedString[1]);
+            jsonObject.add(ConstantsFor.DBCOL_BYTES, splittedString[2]);
+            jsonObject.add("site", splittedString[4]);
+        }
+        catch (IndexOutOfBoundsException ignore) {
+            //14.09.2019 (18:10)
+        }
         return jsonObject.toString();
     }
     
-    void superRun() {
-        DBStatsUploader dbStatsUploader = new DBStatsUploader();
-        File[] allStatFiles = new File(".\\inetstats").listFiles();
-        for (File stat : allStatFiles) {
-            dbStatsUploader.setOption(stat.getName().replace(".csv", ""));
-            String syncStr = dbStatsUploader.syncData();
-            messageToUser.info("syncStr = " + syncStr);
+    @Contract(pure = true)
+    private int uploadFromJSON() {
+        int retInt = checkID();
+        
+        while (!fromFileToJSON.isEmpty()) {
+            String jsStr = fromFileToJSON.removeFirst();
+            retInt = fromFileToJSON.size();
+            JsonObject jsonObject = parseJSONObj(jsStr);
+            retInt += uploadToTableAsJSON(Objects.requireNonNull(jsonObject, jsStr.replace("response", ConstantsFor.DBCOL_SQUIDANS)));
         }
+        return retInt;
+    }
     
+    private int checkID() {
+        int executeUpdate = getLastLocalID(syncTable);
+        int locID = fromFileToJSON.size() - executeUpdate;
+        if (locID <= 0) {
+            fromFileToJSON.clear();
+            return 1;
+        }
+        else {
+            for (int i = 0; i < executeUpdate; i++) {
+                fromFileToJSON.remove();
+            }
+            messageToUser.warn(MessageFormat.format("Sync: {0} entries!", locID));
+        }
+        return executeUpdate;
     }
     
     private long parseStamp(@NotNull String strToParse) {
@@ -127,19 +147,67 @@
         return parsedDate.getTime();
     }
     
+    private int uploadToTableAsJSON(@NotNull JsonObject object) {
+        String[] names = new String[object.names().size()];
+        this.classOpt = new String[object.names().size()];
+        MysqlDataSource dSource = CONNECT_TO_LOCAL.getDataSource();
+        dSource.setDatabaseName(ConstantsFor.STR_INETSTATS);
+        try {
+            for (int i = 0; i < object.names().size(); i++) {
+                String name = object.names().get(i);
+                names[i] = name;
+                classOpt[i] = object.getString(name, name);
+            }
+        }
+        catch (RuntimeException ignore) {
+            //11.09.2019 (12:13)
+        }
+        final String sql = buildSqlString(names);
+        int executeUpdate = 0;
+        try (Connection connection = dSource.getConnection();
+             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
+            executeUpdate = preparedStatement.executeUpdate();
+        }
+        catch (SQLException e) {
+            if (!e.getMessage().contains(ConstantsFor.STR_DUPLICATE)) {
+                System.out.println("sql = " + sql);
+                messageToUser.error(e.getMessage() + " see line: 219 ***");
+                executeUpdate = -220;
+            }
+            if (e.getMessage().toLowerCase().contains("doesn't exist")) {
+                makeTable(syncTable);
+            }
+        }
+        return executeUpdate;
+    }
+    
     protected int makeTable(@NotNull String name) {
-        setDbToSync(ConstantsFor.DB_INETSTATS + name.toLowerCase().replaceAll("\\Q.\\E", "_"));
+        if (!name.contains(".") || name.matches(String.valueOf(ConstantsFor.PATTERN_IP))) {
+            throw new IllegalArgumentException(name);
+        }
         String[] sqlS = {
             ConstantsFor.SQL_ALTERTABLE + getDbToSync() + "\n" +
                 "  ADD PRIMARY KEY (`idrec`),\n" +
                 "  ADD UNIQUE KEY `stamp` (`stamp`,`site`,`bytes`) USING BTREE,\n" +
                 "  ADD KEY `site` (`site`);",
-    
+            
             ConstantsFor.SQL_ALTERTABLE + getDbToSync() + "\n" +
                 "  MODIFY `idrec` mediumint(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '';"};
         return createUploadStatTable(sqlS);
     }
     
+    private JsonObject parseJSONObj(@NotNull String jsStr) {
+        JsonObject object = new JsonObject();
+        try {
+            object = Json.parse(jsStr.replace("},", "}")).asObject();
+        }
+        catch (com.eclipsesource.json.ParseException e) {
+            object.set(PropertiesNames.ERROR, e.getMessage());
+            messageToUser.error(e.getMessage() + " see line: 209 ***");
+        }
+        return object;
+    }
+    
     private int createUploadStatTable(String[] sql) {
         try (Connection connection = CONNECT_TO_LOCAL.getDefaultConnection(ConstantsFor.STR_INETSTATS)) {
             try (PreparedStatement preparedStatementCreateTable = connection.prepareStatement("CREATE TABLE IF NOT EXISTS " + getDbToSync() + "(\n" +
@@ -161,139 +229,26 @@
             }
         }
         catch (SQLException e) {
-            return readDirectlyFile();
-        }
-        return 0;
-    }
-    
-    @Contract(pure = true)
-    private int uploadFromJSON() {
-        int retInt = fromFileToJSON.size();
-        while (!fromFileToJSON.isEmpty()) {
-            String jsStr = fromFileToJSON.removeFirst();
-            retInt = fromFileToJSON.size();
-            JsonObject jsonObject = parseJSONObj(jsStr);
-            retInt += uploadToTableAsJSON(Objects.requireNonNull(jsonObject, jsStr));
-        }
-        return retInt;
-    }
-    
-    private JsonObject parseJSONObj(@NotNull String jsStr) {
-        JsonObject object = new JsonObject();
-        try {
-            object = Json.parse(jsStr.replace("},", "}")).asObject();
-        }
-        catch (com.eclipsesource.json.ParseException e) {
-            object.set(PropertiesNames.ERROR, e.getMessage());
-            messageToUser.error(e.getMessage() + " see line: 209 ***");
-        }
-        return object;
-    }
-    
-    private int uploadToTableAsJSON(@NotNull JsonObject object) {
-        String[] names = new String[object.names().size()];
-        this.classOpt = new String[object.names().size()];
-        
-        try {
-            for (int i = 0; i < object.names().size(); i++) {
-                String name = object.names().get(i);
-                names[i] = name;
-                classOpt[i] = object.getString(name, name);
-            }
-        }
-        catch (RuntimeException ignore) {
-            //11.09.2019 (12:13)
-        }
-        final String sql = buildSqlString(names);
-        int executeUpdate = -142;
-        MysqlDataSource dSource = CONNECT_TO_LOCAL.getDataSource();
-        dSource.setDatabaseName("inet");
-        getCreateQuery(syncTable, makeColumns());
-        try (Connection connection = dSource.getConnection();
-             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
-            executeUpdate = preparedStatement.executeUpdate();
-        }
-        catch (SQLException e) {
-            if (!e.getMessage().contains(ConstantsFor.STR_DUPLICATE)) {
-                System.out.println("sql = " + sql);
-                messageToUser.error(e.getMessage() + " see line: 268 ***");
-                executeUpdate = -268;
-            }
-        }
-        return executeUpdate;
-    }
-    
-    private int readDirectlyFile() {
-        int retInt = 0;
-        Path root = Paths.get(".").toAbsolutePath().normalize();
-        Queue<String> fileAsLi = FileSystemWorker
-            .readFileToQueue(Paths.get(root + ConstantsFor.FILESYSTEM_SEPARATOR + ConstantsFor.STR_INETSTATS + ConstantsFor.FILESYSTEM_SEPARATOR + syncTable
-                .replace(ConstantsFor.DB_INETSTATS, "")
-                .replaceAll("_", ".") + ".csv"));
-    
-        int databaseID = getLastLocalID(getDbToSync());
-        int locID = fileAsLi.size() - databaseID;
-        if (locID <= 0) {
-            return 1;
-        }
-        else {
-            for (int i = 0; i < databaseID; i++) {
-                fileAsLi.remove();
-            }
-            messageToUser.warn(MessageFormat.format("Sync: {0} entries!", locID));
-            while (!fileAsLi.isEmpty()) {
-                String recordLog = fileAsLi.remove();
-                if (!recordLog.isEmpty()) {
-                    setOption(recordLog.split(","));
-                    retInt += uploadToTableIP();
-                }
-            }
-            return retInt;
-        }
-    }
-    
-    @Override
-    Map<String, String> makeColumns() {
-        Map<String, String> colMap = new HashMap<>();
-        colMap.put(ConstantsFor.DBCOL_IDREC, "mediumint(11)");
-        colMap.put(ConstantsFor.DBCOL_STAMP, "bigint(13)");
-        colMap.put(ConstantsFor.DBCOL_SQUIDANS, "varchar(20)");
-        colMap.put(ConstantsFor.DBCOL_BYTES, "int(11)");
-        colMap.put(ConstantsFor.DBCOL_TIMESPEND, "int(11)");
-        colMap.put("site", "varchar(190)");
-        return colMap;
-    }
-    
-    private int uploadToTableIP() {
-        int retInt = 0;
-        if (classOpt == null) {
-            retInt = uploadFromJSON();
-        }
-        else {
-            String[] valuesArr = classOpt;
-            try (Connection connection = CONNECT_TO_LOCAL.getDefaultConnection(ConstantsFor.STR_INETSTATS)) {
-                
-                try (PreparedStatement preparedStatement = connection
-                    .prepareStatement("insert into " + getDbToSync() + "(stamp, squidans , bytes, site) values (?,?,?,?)")) {
-                    preparedStatement.setLong(1, parseStamp(valuesArr[0]));
-                    preparedStatement.setString(2, valuesArr[1]);
-                    preparedStatement.setInt(3, Integer.parseInt(valuesArr[2]));
-                    preparedStatement.setString(4, valuesArr[4]);
-                    retInt += preparedStatement.executeUpdate();
-                }
-                catch (IndexOutOfBoundsException ignore) {
-                    //14.09.2019 (13:44)
-                }
-            }
-            catch (SQLException e) {
-                String message = e.getMessage();
-                if (!message.contains("Duplicate entry")) {
-                    messageToUser.error(e.getMessage() + " see line: 103 ***");
-                }
-                retInt = -103;
-            }
+            String message = e.getMessage();
+            if (message.contains("Multiple primary key defined")) {
+                return 1;
+            }
+            messageToUser.error(message + " see line: 165 ***");
+            return -1;
+        }
+        return 0;
+    }
+    
+    void superRun() {
+        DBStatsUploader dbStatsUploader = new DBStatsUploader();
+        File[] allStatFiles = new File(".\\inetstats").listFiles();
+        for (File stat : allStatFiles) {
+            String dbID = stat.getName().replace(".csv", "").replaceAll("\\Q.\\E", "_");
+            dbStatsUploader.setOption(ConstantsFor.DB_INETSTATS + dbID);
+            String syncStr = dbStatsUploader.syncData();
+            messageToUser.info("syncStr = " + syncStr);
         }
-        return retInt;
+        
     }
     
     private @NotNull String buildSqlString(String[] names) {
@@ -309,6 +264,18 @@
         return stringBuilder.toString();
     }
     
+    @Override
+    Map<String, String> makeColumns() {
+        Map<String, String> colMap = new HashMap<>();
+        colMap.put(ConstantsFor.DBCOL_IDREC, "mediumint(11)");
+        colMap.put(ConstantsFor.DBCOL_STAMP, ConstantsFor.BIGINT_13);
+        colMap.put(ConstantsFor.DBCOL_SQUIDANS, ConstantsFor.VARCHAR_20);
+        colMap.put(ConstantsFor.DBCOL_BYTES, "int(11)");
+        colMap.put(ConstantsFor.DBCOL_TIMESPEND, "int(11)");
+        colMap.put("site", ConstantsFor.VARCHAR_190);
+        return colMap;
+    }
+    
     @Override
     String getDbToSync() {
         return syncTable;
Index: modules/networker/src/test/java/ru/vachok/networker/data/synchronizer/DBStatsUploaderTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/networker/src/test/java/ru/vachok/networker/data/synchronizer/DBStatsUploaderTest.java	(revision 8f689deb4f86d90c484923b6443575412e999be4)
+++ modules/networker/src/test/java/ru/vachok/networker/data/synchronizer/DBStatsUploaderTest.java	(date 1568477910181)
@@ -71,13 +71,13 @@
     public void testUploadFileTo() {
         Path rootP = Paths.get(".").toAbsolutePath().normalize();
         String pathStr = rootP.toString() + "\\inetstats\\10.200.218.54.csv";
-        int i = dbStatsUploader.uploadFileTo(FileSystemWorker.readFileToList(pathStr), "test.10_200_218_54");
+        int i = dbStatsUploader.uploadFileTo(FileSystemWorker.readFileToList(pathStr), "inetstats.10_200_218_54");
         Assert.assertTrue(i > 0);
     }
     
     @Test
     public void testMakeTable() {
-        int i = dbStatsUploader.makeTable("10_200_214_128");
+        int i = dbStatsUploader.makeTable("inetstats.10_200_214_128");
         int countStr = FileSystemWorker.countStringsInFile(Paths.get(".\\inetstats\\10.200.214.128.csv"));
         Assert.assertTrue(i > 0);
     }
Index: modules/networker/src/main/java/ru/vachok/networker/data/synchronizer/SyncInDBStatistics.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/networker/src/main/java/ru/vachok/networker/data/synchronizer/SyncInDBStatistics.java	(revision 8f689deb4f86d90c484923b6443575412e999be4)
+++ modules/networker/src/main/java/ru/vachok/networker/data/synchronizer/SyncInDBStatistics.java	(date 1568479511211)
@@ -44,7 +44,9 @@
         StringBuilder result = new StringBuilder();
         Path rootPath = Paths.get(".");
         if (ipAddress.equalsIgnoreCase(ConstantsFor.DBBASENAME_U0466446_VELKOM + "." + ConstantsFor.TABLE_VELKOMPC)) {
-            result.append(new SyncInDBStatistics.VelkomPCSync().syncData());
+            SyncInDBStatistics.VelkomPCSync velkomPCSync = new SyncInDBStatistics.VelkomPCSync();
+            velkomPCSync.setDbToSync(ipAddress);
+            result.append(velkomPCSync.syncData());
         }
         else {
             result.append(inetStatSync(rootPath));
@@ -126,7 +128,12 @@
     
     @Override
     Map<String, String> makeColumns() {
-        throw new TODOException("ru.vachok.networker.data.synchronizer.SyncInDBStatistics.makeCollumns( Map<String, String> ) at 14.09.2019 - (11:51)");
+        Map<String, String> colMap = new HashMap<>();
+        colMap.put(ConstantsFor.DBCOL_SQUIDANS, ConstantsFor.VARCHAR_20);
+        colMap.put("site", ConstantsFor.VARCHAR_190);
+        colMap.put(ConstantsFor.DBCOL_BYTES, "int(11)");
+        colMap.put(ConstantsFor.DBCOL_STAMP, ConstantsFor.BIGINT_13);
+        return colMap;
     }
     
     private void getTableName(@NotNull Path rootPath) {
@@ -139,24 +146,23 @@
     }
     
     static class VelkomPCSync extends SyncData {
-        
-        
-        private String dbToSync = ConstantsFor.DBBASENAME_U0466446_VELKOM + "." + ConstantsFor.TABLE_VELKOMPC;
+    
+    
+        private static final String DB = ConstantsFor.DBBASENAME_U0466446_VELKOM + "." + ConstantsFor.TABLE_VELKOMPC;
         
         @Override
         public String syncData() {
             Path rootPath = Paths.get(".");
-            setDbToSync(this.dbToSync);
-            int locID = getLastLocalID(dbToSync);
+            setDbToSync(this.DB);
+            int locID = getLastLocalID(DB);
             DBRemoteDownloader downloader = new DBRemoteDownloader(locID);
-            downloader.setDbToSync(this.dbToSync);
-            downloader.writeJSON();
+            downloader.writeJSON(DB);
             return velkomPCSync(rootPath);
         }
         
         private String velkomPCSync(Path rootPath) {
-            setDbToSync(dbToSync);
-            rootPath = Paths.get(rootPath.toAbsolutePath().normalize().toString() + ConstantsFor.FILESYSTEM_SEPARATOR + dbToSync + FileNames.EXT_TABLE);
+            setDbToSync(DB);
+            rootPath = Paths.get(rootPath.toAbsolutePath().normalize().toString() + ConstantsFor.FILESYSTEM_SEPARATOR + DB + FileNames.EXT_TABLE);
             messageToUser.info(fillLimitDequeueFromDBWithFile(rootPath) + LIMDEQ_STR);
             DBStatsUploader dbStatsUploader = new DBStatsUploader();
             dbStatsUploader.setOption(getFromFileToJSON());
@@ -175,12 +181,12 @@
         
         @Override
         String getDbToSync() {
-            return dbToSync;
+            return DB;
         }
         
         @Override
         public void setDbToSync(String dbToSync) {
-            this.dbToSync = dbToSync;
+            throw new UnsupportedOperationException(dbToSync + " set");
         }
         
         @Override
Index: modules/networker/src/main/java/ru/vachok/networker/exe/runnabletasks/external/SaveLogsToDB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/networker/src/main/java/ru/vachok/networker/exe/runnabletasks/external/SaveLogsToDB.java	(revision 8f689deb4f86d90c484923b6443575412e999be4)
+++ modules/networker/src/main/java/ru/vachok/networker/exe/runnabletasks/external/SaveLogsToDB.java	(date 1568469342243)
@@ -4,18 +4,26 @@
 
 
 import org.jetbrains.annotations.Contract;
-import ru.vachok.networker.*;
+import ru.vachok.networker.AppComponents;
+import ru.vachok.networker.AppInfoOnLoad;
+import ru.vachok.networker.TForms;
 import ru.vachok.networker.componentsrepo.UsefulUtilities;
 import ru.vachok.networker.componentsrepo.exceptions.InvokeIllegalException;
 import ru.vachok.networker.componentsrepo.exceptions.TODOException;
+import ru.vachok.networker.componentsrepo.fileworks.FileSystemWorker;
 import ru.vachok.networker.data.enums.ConstantsFor;
 import ru.vachok.networker.info.InformationFactory;
 import ru.vachok.networker.restapi.message.MessageToUser;
 
-import java.sql.*;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
 import java.text.MessageFormat;
 import java.util.StringJoiner;
-import java.util.concurrent.*;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 
 
 /**
@@ -79,7 +87,12 @@
     }
     
     public String saveAccessLogToDatabase() {
-        return logsToDB.getInfoAbout(String.valueOf(extTimeOut));
+        try {
+            return logsToDB.getInfoAbout(String.valueOf(extTimeOut));
+        }
+        catch (ClassCastException e) {
+            return FileSystemWorker.error(getClass().getSimpleName() + ".saveAccessLogToDatabase", e);
+        }
     }
     
     @Override
Index: modules/networker/src/main/java/ru/vachok/networker/data/synchronizer/DBRemoteDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/networker/src/main/java/ru/vachok/networker/data/synchronizer/DBRemoteDownloader.java	(revision 8f689deb4f86d90c484923b6443575412e999be4)
+++ modules/networker/src/main/java/ru/vachok/networker/data/synchronizer/DBRemoteDownloader.java	(date 1568479511219)
@@ -6,6 +6,7 @@
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import ru.vachok.networker.componentsrepo.exceptions.TODOException;
+import ru.vachok.networker.componentsrepo.fileworks.FileSystemWorker;
 import ru.vachok.networker.data.enums.FileNames;
 
 import java.io.BufferedOutputStream;
@@ -43,13 +44,15 @@
     
     @Override
     public String syncData() {
+        if (!dbToSync.contains(".")) {
+            throw new IllegalArgumentException(dbToSync);
+        }
         StringBuilder stringBuilder = new StringBuilder();
-    
         this.lastLocalId = getLastLocalID(dbToSync);
     
         stringBuilder.append(getDbToSync()).append(", ");
         stringBuilder.append(CONNECT_TO_REGRU.toString()).append(" dataConnectTo");
-        stringBuilder.append(sqlConnect());
+        stringBuilder.append(sqlConnect(dbToSync));
         
         return stringBuilder.toString();
     }
@@ -64,21 +67,11 @@
         throw new TODOException("ru.vachok.networker.data.synchronizer.DBRemoteDownloader.uploadFileTo( int ) at 14.09.2019 - (9:10)");
     }
     
-    String writeJSON() {
-        try (BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(dbToSync + FileNames.EXT_TABLE))) {
-            bufferedOutputStream.write(sqlConnect().getBytes());
-        }
-        catch (IOException e) {
-            messageToUser.error(e.getMessage() + " see line: 107");
-        }
-        return getDbToSync() + FileNames.EXT_TABLE;
-    }
-    
-    private @NotNull String sqlConnect() {
+    private @NotNull String sqlConnect(@NotNull String dbFullID) {
         String jsonStr = "null";
+        this.dbToSync = dbFullID;
         try (Connection connection = CONNECT_TO_REGRU.getDataSource().getConnection()) {
-            ;
-            final String sql = String.format("SELECT * FROM %s WHERE idrec > %s", dbToSync, getLastLocalID(dbToSync));
+            final String sql = String.format("SELECT * FROM %s WHERE idrec > %s", dbFullID, getLastLocalID(dbFullID));
             try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                 try (ResultSet resultSet = preparedStatement.executeQuery()) {
                     jsonStr = makeJSONStrings(resultSet);
@@ -89,11 +82,21 @@
             }
         }
         catch (SQLException e) {
-            messageToUser.error(e.getMessage() + " see line: 69");
+            messageToUser.error(FileSystemWorker.error(getClass().getSimpleName() + ".sqlConnect", e));
         }
         return jsonStr;
     }
     
+    String writeJSON(String dbFullID) {
+        try (BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(dbToSync + FileNames.EXT_TABLE))) {
+            bufferedOutputStream.write(sqlConnect(dbFullID).getBytes());
+        }
+        catch (IOException e) {
+            messageToUser.error(e.getMessage() + " see line: 107");
+        }
+        return getDbToSync() + FileNames.EXT_TABLE;
+    }
+    
     @Override
     String getDbToSync() {
         return dbToSync;
Index: modules/networker/src/main/java/ru/vachok/networker/data/enums/ConstantsFor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/networker/src/main/java/ru/vachok/networker/data/enums/ConstantsFor.java	(revision 8f689deb4f86d90c484923b6443575412e999be4)
+++ modules/networker/src/main/java/ru/vachok/networker/data/enums/ConstantsFor.java	(date 1568476290501)
@@ -397,6 +397,12 @@
     
     public static final String DB_INETSTATS = "inetstats.";
     
+    public static final String VARCHAR_20 = "varchar(20)";
+    
+    public static final String VARCHAR_190 = "varchar(190)";
+    
+    public static final String BIGINT_13 = "bigint(13)";
+    
     public static @NotNull String[] getExcludedFoldersForCleaner() {
         List<String> excludeFolders = new ArrayList<>();
         excludeFolders.addAll(Arrays.asList(EXCLUDED_FOLDERS_FOR_CLEANER));
Index: modules/networker/src/test/java/ru/vachok/networker/data/synchronizer/SyncDataTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/networker/src/test/java/ru/vachok/networker/data/synchronizer/SyncDataTest.java	(revision 8f689deb4f86d90c484923b6443575412e999be4)
+++ modules/networker/src/test/java/ru/vachok/networker/data/synchronizer/SyncDataTest.java	(date 1568479511203)
@@ -1,15 +1,20 @@
 package ru.vachok.networker.data.synchronizer;
 
 
+import org.jetbrains.annotations.NotNull;
 import org.testng.Assert;
 import org.testng.annotations.AfterClass;
 import org.testng.annotations.BeforeClass;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
-import ru.vachok.networker.componentsrepo.exceptions.InvokeEmptyMethodException;
+import ru.vachok.networker.TForms;
 import ru.vachok.networker.configuretests.TestConfigure;
 import ru.vachok.networker.configuretests.TestConfigureThreadsLogMaker;
 
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+
 
 /**
  @see SyncData
@@ -60,19 +65,36 @@
     
     @Test
     public void getCustomIDTest() {
-        syncData.setDbToSync("u0466446_webapp.ru_vachok_networker");
+    
         syncData.setIdColName("counter");
-        int lastRemoteID = syncData.getLastRemoteID("u0466446_velkom.velkompc");
+        int lastRemoteID = syncData.getLastRemoteID("u0466446_webapp.ru_vachok_networker");
         Assert.assertTrue(lastRemoteID > 0, null + " lastRemoteID");
     }
     
     @Test
     public void testMakeColumns() {
-        throw new InvokeEmptyMethodException("MakeColumns created 14.09.2019 at 12:06");
+        Map<String, String> map = SyncData.getInstance().makeColumns();
+        String columns = new TForms().fromArray(map);
+        Assert.assertEquals(columns, "squidans : varchar(20)\n" +
+            "site : varchar(190)\n" +
+            "bytes : int(11)\n" +
+            "stamp : bigint(13)\n");
     }
     
     @Test
     public void testGetCreateQuery() {
-        throw new InvokeEmptyMethodException("GetCreateQuery created 14.09.2019 at 12:06");
+        Map<String, String> colMap = new HashMap<>();
+        colMap.put("test", "test");
+        @NotNull String[] query = SyncData.getInstance().getCreateQuery("test.test", colMap);
+        String createDB = Arrays.toString(query);
+        Assert.assertEquals(createDB, "[CREATE TABLE IF NOT EXISTS test.test(\n" +
+            "  `idrec` mediumint(11) unsigned NOT NULL COMMENT '',\n" +
+            "  `stamp` bigint(13) unsigned NOT NULL COMMENT '',\n" +
+            "  `test` test NOT NULL COMMENT '',\n" +
+            ") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n" +
+            ", ALTER TABLE test.test\n" +
+            "  ADD PRIMARY KEY (`idrec`);\n" +
+            ", ALTER TABLE test.test\n" +
+            "  MODIFY `idrec` mediumint(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '';]");
     }
 }
\ No newline at end of file
Index: modules/networker/src/test/java/ru/vachok/networker/data/synchronizer/DBRemoteDownloaderTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/networker/src/test/java/ru/vachok/networker/data/synchronizer/DBRemoteDownloaderTest.java	(revision 8f689deb4f86d90c484923b6443575412e999be4)
+++ modules/networker/src/test/java/ru/vachok/networker/data/synchronizer/DBRemoteDownloaderTest.java	(date 1568479511207)
@@ -7,6 +7,7 @@
 import org.testng.annotations.Test;
 import ru.vachok.networker.configuretests.TestConfigure;
 import ru.vachok.networker.configuretests.TestConfigureThreadsLogMaker;
+import ru.vachok.networker.data.enums.ConstantsFor;
 import ru.vachok.networker.data.enums.FileNames;
 
 import java.io.File;
@@ -35,7 +36,7 @@
     
     @Test
     public void testSyncData() {
-        dbRemoteDownloader.setDbToSync("pcuserauto");
+        dbRemoteDownloader.setDbToSync(ConstantsFor.DBBASENAME_U0466446_VELKOM + ".pcuserauto");
         String data = dbRemoteDownloader.syncData();
         Assert.assertTrue(data.contains("\"idRec\":"), data);
     }
@@ -53,8 +54,8 @@
         if (jsonFile.exists()) {
             Assert.assertTrue(jsonFile.delete());
         }
-        
-        String writeJSONRes = dbRemoteDownloader.writeJSON();
+    
+        String writeJSONRes = dbRemoteDownloader.writeJSON(ConstantsFor.DBBASENAME_U0466446_VELKOM + ".pcuserauto");
         System.out.println("writeJSONRes = " + writeJSONRes);
         
         Assert.assertTrue(jsonFile.exists());
Index: modules/networker/tests/LocalUserResolver.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/networker/tests/LocalUserResolver.log	(revision 8f689deb4f86d90c484923b6443575412e999be4)
+++ modules/networker/tests/LocalUserResolver.log	(date 1568464213333)
@@ -8,3 +8,13 @@
 End ***
 
 
+*** Starting "Local" prio=5 Id=1 RUNNABLE
+
+
+
+Real Time run = 241 (in seconds)
+CPU Time = 25 046 (in milliseconds). 15:30:13.332773700
+cpuTime in nanos = 25046875000
+End ***
+
+
